import requests
from bs4 import BeautifulSoup
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import datetime
import asyncio
import random
import nest_asyncio

nest_asyncio.apply()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = '7895859092:AAESvsmGrRhUJ7BSYcSYlm1idR7S3g4foQI'
OWNER_CHAT_ID = 589941059  # —Ç–≤–æ–π Telegram user ID
CHANNEL_USERNAME = 'miata_cy'

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
subscribers = set()
last_seen_url = None

# === –°–∞–π—Ç —Å Mazda MX-5 ===
URL = "https://www.bazaraki.com/car-motorbikes-boats-and-parts/cars-trucks-and-vans/mazda/mazda-mx5/"

def get_all_ads():
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, "html.parser")
    ads = soup.find_all("a", href=True)
    results = []
    for tag in ads:
        text = tag.get_text(strip=True)
        href = tag["href"]
        if "mazda-mx5" in href.lower() and "Mazda MX5" in text:
            full_url = "https://www.bazaraki.com" + href
            results.append((text, full_url))
    return list(dict.fromkeys(results))  # —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Mazda MX-5 –Ω–∞ Bazaraki.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /available ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç–∫—É)\n"
        "  /subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n"
        "  /unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "  /randompost ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ Miata CY üöó\n"
        "  /start –∏–ª–∏ /help ‚Äî –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑\n\n"
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç *–±–µ–∑ –∑–≤—É–∫–∞*, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å üòä\n\n"
        "üõ°Ô∏è *–î–∏—Å–∫–ª–µ–π–º–µ—Ä:* –ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à Telegram ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-–ª–∏–±–æ –µ—â—ë ‚Äî –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.\n\n"
        "‚úâÔ∏è –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ —Å—é–¥–∞! üôÇ"
    )

async def available_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    ads = get_all_ads()
    if not ads:
        await update.message.reply_text("üôÅ –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for title, link in ads:
        await update.message.reply_text(f"{title}\n{link}", disable_notification=True)
        await asyncio.sleep(1)

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribers.add(user_id)
    await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        await update.message.reply_text("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        await update.message.reply_text("–¢—ã –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

async def randompost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        async with context.bot.get_chat(CHANNEL_USERNAME) as channel:
            posts = await context.bot.get_chat_history(channel.id, limit=100)
            messages = [m for m in posts if m.text or m.caption]
            if messages:
                msg = random.choice(messages)
                if msg.photo:
                    await update.message.reply_photo(photo=msg.photo[-1].file_id, caption=msg.caption, disable_notification=True)
                else:
                    await update.message.reply_text(msg.text, disable_notification=True)
            else:
                await update.message.reply_text("–ö–∞–Ω–∞–ª –ø–æ–∫–∞ –ø—É—Å—Ç.")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    message = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n{text}"
    await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=message)

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
async def check_for_new_ads(bot: Bot):
    global last_seen_url
    ads = get_all_ads()
    if ads:
        title, link = ads[0]
        if link != last_seen_url:
            last_seen_url = link
            text = f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n{title}\n{link}"
            for user_id in subscribers:
                try:
                    await bot.send_message(chat_id=user_id, text=text, disable_notification=True)
                except:
                    pass

async def scheduled_checker(bot: Bot):
    while True:
        now = datetime.datetime.now()
        if now.hour in [11, 18]:
            print("‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏")
            await check_for_new_ads(bot)
            await asyncio.sleep(3600)
        else:
            await asyncio.sleep(300)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", start_command))
    app.add_handler(CommandHandler("available", available_command))
    app.add_handler(CommandHandler("subscribe", subscribe_command))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    app.add_handler(CommandHandler("randompost", randompost_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_user_message))

    asyncio.create_task(scheduled_checker(app.bot))

    print("üöó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
