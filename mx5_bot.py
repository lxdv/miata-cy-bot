import os
import requests
import random
import datetime
import asyncio
from bs4 import BeautifulSoup
from telegram import (
    Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

import nest_asyncio
nest_asyncio.apply()

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ Render
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # —Ç–æ–∂–µ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç –≤ Render

# === –§–∞–π–ª—ã
SUBSCRIBERS_FILE = "subscribers.txt"
POSTS_FILE = "posts.txt"
LAST_SEEN_FILE = "last_seen.txt"

# === URL —Å Mazda MX-5 ===
URL = "https://www.bazaraki.com/car-motorbikes-boats-and-parts/cars-trucks-and-vans/mazda/mazda-mx5/"

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribers = set()

def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(line.strip() for line in f if line.strip())
    return set()

def save_subscribers():
    with open(SUBSCRIBERS_FILE, "w") as f:
        for chat_id in subscribers:
            f.write(f"{chat_id}\n")

subscribers = load_subscribers()

def get_last_seen_url():
    if os.path.exists(LAST_SEEN_FILE):
        with open(LAST_SEEN_FILE, "r") as f:
            return f.read().strip()
    return None

def save_last_seen_url(url):
    with open(LAST_SEEN_FILE, "w") as f:
        f.write(url)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def get_all_ads():
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')
    ads = soup.find_all("a", href=True, text=lambda t: t and "Mazda MX5" in t)

    results = []
    for tag in ads:
        title = tag.text.strip()
        link = "https://www.bazaraki.com" + tag['href']
        results.append((title, link))
    return results

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def send_ad(bot: Bot, title, link, chat_id):
    text = f"{title}\nüîó {link}"
    try:
        await bot.send_message(chat_id=chat_id, text=text, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def check_for_new_ad(bot: Bot):
    ads = get_all_ads()
    if not ads:
        print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    title, link = ads[0]
    last_seen = get_last_seen_url()
    if link != last_seen:
        save_last_seen_url(link)
        print(f"üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}")
        for user in subscribers:
            await send_ad(bot, title, link, user)
    else:
        print("‚è≥ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")

# === –ö–æ–º–∞–Ω–¥—ã
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="available")],
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
         InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç", callback_data="randompost")],
    ]
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Mazda MX-5 –Ω–∞ Bazaraki.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/available ‚Äî –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "/subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n"
        "/unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/randompost ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ Miata CY üöó\n"
        "/subscribers ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/start –∏–ª–∏ /help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç *–±–µ–∑ –∑–≤—É–∫–∞*, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å üòä\n\n"
        "üõ°Ô∏è *–î–∏—Å–∫–ª–µ–π–º–µ—Ä:* –ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à Telegram ID.\n"
        "‚úâÔ∏è –ü–∏—à–∏ –ø—Ä—è–º–æ —Å—é–¥–∞, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã!"
    )
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

async def available_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    ads = get_all_ads()
    if not ads:
        await update.message.reply_text("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for title, link in ads:
        await send_ad(context.bot, title, link, update.message.chat_id)
        await asyncio.sleep(1)

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    subscribers.add(chat_id)
    save_subscribers()
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers()
        await update.message.reply_text("‚ùé –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def randompost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(POSTS_FILE, "r") as f:
            posts = [line.strip() for line in f if line.strip()]
        if not posts:
            await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return
        post = random.choice(posts)
        await update.message.reply_text(post, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ randompost: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç.")

async def subscribers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != str(ADMIN_CHAT_ID):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not subscribers:
        await update.message.reply_text("üì≠ –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n" + "\n".join(subscribers)
        await update.message.reply_text(text)

async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user = update.message.from_user
        text = update.message.text
        forwarded = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id}):\n{text}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=forwarded)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    dummy_update = Update(update.update_id, message=query.message)
    dummy_update.message.chat_id = query.message.chat_id

    if data == "available":
        await available_command(dummy_update, context)
    elif data == "subscribe":
        await subscribe_command(dummy_update, context)
    elif data == "unsubscribe":
        await unsubscribe_command(dummy_update, context)
    elif data == "randompost":
        await randompost_command(dummy_update, context)

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è /
async def set_bot_commands(app):
    commands = [
        BotCommand("available", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand("randompost", "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ Miata CY"),
        BotCommand("subscribers", "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∞–¥–º–∏–Ω)"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å"),
    ]
    await app.bot.set_my_commands(commands)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", start_command))
    application.add_handler(CommandHandler("available", available_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("randompost", randompost_command))
    application.add_handler(CommandHandler("subscribers", subscribers_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_user_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    await set_bot_commands(application)
    asyncio.create_task(schedule_checks(application.bot))

    print("üöó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã.")
    await application.run_polling()

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def schedule_checks(bot: Bot):
    while True:
        await check_for_new_ad(bot)
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
