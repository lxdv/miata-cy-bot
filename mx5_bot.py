import requests
from bs4 import BeautifulSoup
from telegram import (
    Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import datetime
import asyncio
import random
import os
import nest_asyncio

nest_asyncio.apply()

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# === –§–∞–π–ª—ã ===
SUBSCRIBERS_FILE = "subscribers.txt"
POSTS_FILE = "posts.txt"
LAST_SEEN_FILE = "last_seen.txt"

# === URL —Å Mazda MX-5 ===
URL = "https://www.bazaraki.com/car-motorbikes-boats-and-parts/cars-trucks-and-vans/mazda/mazda-mx5/"

# === –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ ===
subscribers = set()

def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(line.strip() for line in f if line.strip())
    return set()

def save_subscribers():
    with open(SUBSCRIBERS_FILE, "w") as f:
        for chat_id in subscribers:
            f.write(f"{chat_id}\n")

subscribers = load_subscribers()

# === –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ===
def load_last_seen():
    if os.path.exists(LAST_SEEN_FILE):
        with open(LAST_SEEN_FILE, "r") as f:
            return f.read().strip()
    return None

def save_last_seen(url):
    with open(LAST_SEEN_FILE, "w") as f:
        f.write(url)

last_seen_url = load_last_seen()

# === –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
def get_all_ads():
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')
    ads = soup.find_all("a", href=True, text=lambda t: t and "Mazda MX5" in t)
    results = []
    for tag in ads:
        title = tag.text.strip()
        link = "https://www.bazaraki.com" + tag['href']
        results.append((title, link))
    return results

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
async def send_ad(bot: Bot, title, link, chat_id):
    text = f"{title}\nüîó {link}"
    try:
        await bot.send_message(chat_id=chat_id, text=text, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
async def check_for_new_ad(bot: Bot):
    global last_seen_url
    ads = get_all_ads()
    if ads:
        title, link = ads[0]
        if link != last_seen_url:
            last_seen_url = link
            save_last_seen(link)
            print(f"üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}")
            for user in subscribers:
                await send_ad(bot, title, link, user)
        else:
            print("‚è≥ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
    else:
        print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="available")],
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
         InlineKeyboardButton("‚ùé –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç", callback_data="randompost")]
    ])
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Mazda MX-5 –Ω–∞ Bazaraki.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /available ‚Äî —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "  /subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "  /unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "  /randompost ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç Miata CY\n"
        "  /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "‚úâÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –ø—Ä–∏–¥—ë—Ç –∞–¥–º–∏–Ω—É!"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_command(update, context)

async def available_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    ads = get_all_ads()
    if not ads:
        await update.message.reply_text("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for title, link in ads:
        await send_ad(context.bot, title, link, update.message.chat_id)
        await asyncio.sleep(1)

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    subscribers.add(chat_id)
    save_subscribers()
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers()
        await update.message.reply_text("‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def randompost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(POSTS_FILE, "r") as f:
            posts = [line.strip() for line in f if line.strip()]
        if not posts:
            await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.")
            return
        post = random.choice(posts)
        await update.message.reply_text(post, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ randompost: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç.")

async def subscribers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != str(ADMIN_CHAT_ID):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not subscribers:
        await update.message.reply_text("üì≠ –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.")
    else:
        await update.message.reply_text("üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏:\n" + "\n".join(subscribers))

async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user = update.message.from_user
        text = update.message.text
        msg = f"üì© @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id}):\n{text}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

# === –ö–Ω–æ–ø–∫–∏ ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "available":
        ads = get_all_ads()
        if not ads:
            await query.message.reply_text("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        for title, link in ads:
            await send_ad(context.bot, title, link, query.message.chat_id)
            await asyncio.sleep(1)

    elif query.data == "subscribe":
        chat_id = str(query.message.chat_id)
        subscribers.add(chat_id)
        save_subscribers()
        await query.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.")

    elif query.data == "unsubscribe":
        chat_id = str(query.message.chat_id)
        if chat_id in subscribers:
            subscribers.remove(chat_id)
            save_subscribers()
            await query.message.reply_text("‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
        else:
            await query.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

    elif query.data == "randompost":
        try:
            with open(POSTS_FILE, "r") as f:
                posts = [line.strip() for line in f if line.strip()]
            if not posts:
                await query.message.reply_text("üì≠ –ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
                return
            post = random.choice(posts)
            await query.message.reply_text(post, disable_notification=True)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ randompost: {e}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

# === –ö–æ–º–∞–Ω–¥—ã Telegram
async def set_bot_commands(app):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("available", "–¢–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
        BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),
        BotCommand("randompost", "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç"),
    ]
    await app.bot.set_my_commands(commands)

# === –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def schedule_checks(bot: Bot):
    while True:
        await check_for_new_ad(bot)
        await asyncio.sleep(3600)

# === main
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("available", available_command))
    app.add_handler(CommandHandler("subscribe", subscribe_command))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    app.add_handler(CommandHandler("randompost", randompost_command))
    app.add_handler(CommandHandler("subscribers", subscribers_command))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_user_message))
    app.add_handler(CallbackQueryHandler(handle_callback))

    await set_bot_commands(app)
    asyncio.create_task(schedule_checks(app.bot))

    print("üöó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
