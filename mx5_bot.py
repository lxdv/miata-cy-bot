import requests
from bs4 import BeautifulSoup
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import datetime
import asyncio
import random
import os

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_BOT_TOKEN = os.getenv("7895859092:AAESvsmGrRhUJ7BSYcSYlm1idR7S3g4foQI")
ADMIN_CHAT_ID = os.getenv("589941059")  # –¢–≤–æ–π Telegram ID
SUBSCRIBERS_FILE = "subscribers.txt"
POSTS_FILE = "posts.txt"

# === URL —Å Mazda MX-5 ===
URL = "https://www.bazaraki.com/car-motorbikes-boats-and-parts/cars-trucks-and-vans/mazda/mazda-mx5/"

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
last_seen_url = None
subscribers = set()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(line.strip() for line in f if line.strip())
    return set()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª
def save_subscribers():
    with open(SUBSCRIBERS_FILE, "w") as f:
        for chat_id in subscribers:
            f.write(f"{chat_id}\n")

subscribers = load_subscribers()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def get_all_ads():
    response = requests.get(URL)
    soup = BeautifulSoup(response.text, 'html.parser')
    ads = soup.find_all("a", href=True, text=lambda t: t and "Mazda MX5" in t)

    results = []
    for tag in ads:
        title = tag.text.strip()
        link = "https://www.bazaraki.com" + tag['href']
        results.append((title, link))
    return results

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def send_ad(bot: Bot, title, link, chat_id):
    text = f"{title}\nüîó {link}"
    try:
        await bot.send_message(chat_id=chat_id, text=text, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def check_for_new_ad(bot: Bot):
    global last_seen_url
    ads = get_all_ads()
    if ads:
        title, link = ads[0]
        if link != last_seen_url:
            last_seen_url = link
            print(f"üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}")
            for user in subscribers:
                await send_ad(bot, title, link, user)
        else:
            print("‚è≥ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
    else:
        print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# === –ö–æ–º–∞–Ω–¥–∞ /available
async def available_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    ads = get_all_ads()
    if not ads:
        await update.message.reply_text("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for title, link in ads:
        await send_ad(context.bot, title, link, update.message.chat_id)
        await asyncio.sleep(1)

# === –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    subscribers.add(chat_id)
    save_subscribers()
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.")

# === –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers()
        await update.message.reply_text("‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# === –ö–æ–º–∞–Ω–¥–∞ /randompost
async def randompost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(POSTS_FILE, "r") as f:
            posts = [line.strip() for line in f if line.strip()]
        if not posts:
            await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return
        post = random.choice(posts)
        await update.message.reply_text(post, disable_notification=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ randompost: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç.")

# === –ö–æ–º–∞–Ω–¥–∞ /start –∏ /help
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Mazda MX-5 –Ω–∞ Bazaraki.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /available ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç–∫—É)\n"
        "  /subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n"
        "  /unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "  /randompost ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ Miata CY üöó\n"
        "  /start –∏–ª–∏ /help ‚Äî –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑\n\n"
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç *–±–µ–∑ –∑–≤—É–∫–∞*, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å üòä\n\n"
        "üõ°Ô∏è *–î–∏—Å–∫–ª–µ–π–º–µ—Ä:* –ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à Telegram ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-–ª–∏–±–æ –µ—â—ë ‚Äî –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.\n\n"
        "‚úâÔ∏è –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ —Å—é–¥–∞! üôÇ"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 11:00 –∏ 18:00
async def schedule_checks(bot: Bot):
    while True:
        now = datetime.datetime.now()
        if now.hour == 11 or now.hour == 18:
            print(f"üïì {now.strftime('%H:%M')} ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            await check_for_new_ad(bot)
            await asyncio.sleep(3600)
        else:
            await asyncio.sleep(300)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", start_command))
    application.add_handler(CommandHandler("available", available_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("randompost", randompost_command))

    asyncio.create_task(schedule_checks(application.bot))

    print("üöó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã.")
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
