import time
import asyncio
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_BOT_TOKEN = '7895859092:AAESvsmGrRhUJ7BSYcSYlm1idR7S3g4foQI'
CHAT_ID = 589941059 # –±–µ–∑ –∫–∞–≤—ã—á–µ–∫

# === –°—Å—ã–ª–∫–∞ –Ω–∞ Mazda MX-5 ===
URL = "https://www.bazaraki.com/car-motorbikes-boats-and-parts/cars-trucks-and-vans/mazda/mazda-mx5/"

# === –°–æ–∑–¥–∞–Ω–∏–µ headless-–±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Selenium ===
def create_driver():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(options=options)

# === –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º Mazda MX5 ===
def get_all_ads():
    driver = create_driver()
    driver.get(URL)
    time.sleep(3)

    # –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    for _ in range(5):
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)

    links = driver.find_elements(By.TAG_NAME, "a")
    results = []

    for link in links:
        try:
            text = link.text.strip()
            href = link.get_attribute("href")
            if "Mazda MX5" in text and href:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {text} ‚Äî {href}")
                results.append((text, "‚Äî", href, None))  # –±–µ–∑ —Ü–µ–Ω—ã –∏ —Ñ–æ—Ç–æ
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏:", e)

    driver.quit()
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ Mazda-—Å—Å—ã–ª–æ–∫: {len(results)}")
    return results

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram ===
async def send_ad(update: Update, title, price, link, image_url):
    caption = f"{title}\n–¶–µ–Ω–∞: {price}\nüîó {link}"
    try:
        await update.message.reply_text(caption)
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
last_seen_url = None
async def check_for_new(bot: Bot):
    global last_seen_url
    ads = get_all_ads()
    if ads:
        title, price, link, image_url = ads[0]
        if link != last_seen_url:
            last_seen_url = link
            print(f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}")
            # –Ω–µ—Ç update, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
        else:
            print("‚è≥ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
    else:
        print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /available ===
async def available_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© –ö–æ–º–∞–Ω–¥–∞ /available –ø–æ–ª—É—á–µ–Ω–∞")
    await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —è –∏—â—É —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    ads = get_all_ads()
    if not ads:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    for title, price, link, image_url in ads:
        await send_ad(update, title, price, link, image_url)
        await asyncio.sleep(1)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Mazda MX-5 –Ω–∞ Bazaraki.\n\n"
        "üìå –Ø —É–º–µ—é:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∞–π—Ç –¥–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å (–≤ 11:00 –∏ 18:00)\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /available\n\n"
        "–ù–∞–ø–∏—à–∏ /available, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üíå"
    )
    await update.message.reply_text(welcome_text)

    # üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
    user = update.effective_user
    alert_text = f"üëÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!"
    try:
        await context.bot.send_message(chat_id=CHAT_ID, text=alert_text)
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:", e)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å ===
async def schedule_check(bot: Bot):
    while True:
        now = time.localtime()
        if now.tm_hour == 11 or now.tm_hour == 18:
            print(f"üïí {now.tm_hour:02d}:{now.tm_min:02d} ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            await check_for_new(bot)
            await asyncio.sleep(3600)
        else:
            await asyncio.sleep(300)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("available", available_command))
    app.add_handler(CommandHandler("start", start_command))
    asyncio.create_task(schedule_check(app.bot))
    print("üöó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É /available –∏ –ø—Ä–æ–≤–µ—Ä—è—é –≤ 11:00 –∏ 18:00")
    await app.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())